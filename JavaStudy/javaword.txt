■開発
* ウォーターフォール開発
  工程を分けて順に段階的得て行う方法。前の工程には戻らない前提。
* アジャイル開発
  一つの機能を単位として小さいサイクルで繰り返すこと。期間中の仕様変更に強い。
* マイグレーション
  プログラムやデータを移行、変換する
* デグレーション
    デグレードのこと。新しいバージョンのソフトウェアの品質が以前よりも悪くなること。改修した不具合やバグが再発すること。
* デプロイ
  ネットワークを通じて提供されるwebアプリケーションなどのシステムを利用可能な
  状態にすること。
* コンフリクト
  同じデータやファイルを同時更新した際に起こる競合状態、不具合のこと。
* 環境
    * 開発環境（ローカル）
      ユーザーが直接操作できるネットワークにつながっていない機器
    * 検証環境（ステージング）
      開発の最終段階で検証用に用意される、実際の運用環境と変わらない環境
    * 本番環境
      システムをリリースする環境。本番環境にデプロイされたシステムは、ユーザーが利用できるようになる。

* 設計書／仕様書
    * 要件定義
      ユーザーの要求をシステム要件へ変換していくのが要件定義。
      業務、システム、機能、非機能要件についてまとめ、業務フローの検討を踏まえ要求と要件をすり合わせた上で要件定義書の作成を行う。
    * 基本設計書
      外側から見てどのような動きをするのかをまとめた設計
      業務フロー、機能一覧表、ネットワーク構成図、テーブル定義、ER図、画面レイアウト、帳票レイアウトを作成する。
    * 詳細設計書
      開発向けに作った設計書
      機能設計書(機能ごとに処理、フローチャート、画面の詳細項目、帳票の詳細項目)、データベースの物理設計書を作成する。
* テスト
    * 単体テスト（UT） unit testing ユニットテスティング
      手続きや関数といった個々の機能ごとに動作検証を行う手法。
    * 結合テスト（CT／IT） combined test カーンバイドテスト Integration Test インターグレイションテスト
      個々の機能を結合、連携・動作しているかを確認すること
    * 総合テスト（ST） System test システムテスト
      システム全体で予定通りの機能を満たしているか、機能や性能が仕様書通りに構築できているかを検証する
* エビデンス／証跡
      システムが正しく動作している、あるいは不具合が生じたことを示す証拠となる書類やデータ
* データパッチ
      プログラムやデータを更新・修正するために、新しい版との相違点（差分）を抜き出したデータ
* Access
      ソフトウェア、システム、情報などを利用可能な状態にすること(操作、取得、閲覧、読み書き)
* マクロ
      操作手順をセットにして登録しておき、任意に呼び出して実行させることができる機能
    * VBA
      Microsoft Officeに含まれるアプリケーションの拡張機能。
      簡易なプログラムを記述して実行することで複雑な処理の自動化を行なうことができるもの。
* GAS（Google Apps Script）
      Googleが提供しているJavaScriptベースの開発環境。
* API（Application Programming Interface）アプリケーション プログラミング インターフェース
      ソフトウェアやアプリケーションなどの一部を外部に向けて公開することにより、第三者が開発したソフトウェアと機能を共有できるようにしてくれるもの
    * WEB API
      機能を外部の別のプログラムから呼び出して利用するための手順・規約の類型の一つで、HTTPなどWebの技術を用いて構築されたもの
    * REST API
      Webシステムを外部から利用するためのプログラムの呼び出し規約の種類の一つで、RESTと呼ばれる設計原則に従って策定されたもの。
    * SOAP
      異なるコンピュータ上で動作するプログラム同士がネットワークを通じて連携し動作するための通信プロトコルの一つ。
* Ajax
      あるWebページを表示したまま、再読み込みを伴わずにWebサーバと通信し、表示を変更する手法
    * XML（Extensible Markup Language）エクステンジブル マークアップ ランゲージ
      文書やデータの意味や構造を記述するためのマークアップ言語の一つ
    * JSON（JavaScript Object Notation）ジャバスクリプト オブジェクト ノーテーション
      JavaScriptにおけるオブジェクトの表記法を応用したテキスト(文字)ベースのデータ形式
    * ステータスコード
      HTTPステータスコードとも呼ばれ、HTML表情前にブラウザが受信する3桁の番号。
    * クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
      JSでやりとりできるところは、JSを取得した場所と同一の場所だけという制限に対して同一生成元でない場所への要求を安全に許可する仕組み
      同一生成元というのは英語で Same-Origin といいます。同一ではない場合をクロスオリジン (Cross-Origin) といいます。
* バリデーション
      入力項目に数値や書式が正しく入力されているか確認すること。
* データ連携
      格納先がそれぞれ異なるデータを、共有・活用すること、またはそのための技術・プロセス
    * Daemon
      UNIX系OSの常駐プログラム。
    * CRON
      UNIX系システムで使用されるジョブを自動実行するスケジューラー
    * バッチ
      処理の単位。
      データを一定量溜めてから、一括で処理を行うこと。
    * ログ
      利用状況やデータ通信など履歴や情報の記録を取る事
    * CSV
      表のように項目が縦横に並んだデータを記述することができる形式   テキスト間の区切りがカンマ
    * TSV
      複数の項目で構成されるデータを複数件列挙して表現することができる汎用的なデータ形式の一つ  テキスト間の区切りがスペース
* プルリクエスト（マージリクエスト）
      GitHub上でコードの変更をレビュワーに通知し、マージを依頼する機能
■ チケット管理ツール
    タスク管理ツールのこと。
* asana（アサナ）
    イベントやキャンペーンに携わるチームメンバーの日々の仕事をサポートするためのワークマネジメントツール
* Backlog（バックログ）
    ヌーラボが提供しているSaaS型のプロジェクト管理ツール。
* Jooto（ジョートー）
    PR TIMESが提供している、クラウド型のプロジェクト・タスク管理ツール。
* Redmine（レッドマイン）
    オープンソースのプロジェクト管理ソフトの一つ
* Trello（トレロ）
    タスク管理に特化したシンプルな機能の付箋を貼ったりはがしたりするように、簡単にタスク管理できるツール
■ バージョン管理
    ファイルに対して「誰が」「いつ」「何を変更したか」というような情報を記録することで、過去のある時点の状態を復元
* 集中型
    リポジトリを用意できるのは１つのサーバ、中央サーバに接続できない環境の場合最新のファイルを取得・反映ができない
* 分散型
    主となるサーバがなく、誰でもリポジトリの作成、他のリポジトリと同期ができる
* Github
    バージョン管理システム「Git」で管理するデータをインターネット上で共有・公開できるネットサービスの一つ
* Backlog
    GitとSubversionに対応したバージョン管理機能を持つ、プロジェクト管理ツール。
* SourceTree（ソースツリー）
    Gitの操作ができる無料のデスクトップアプリケーション。
* Tortoise SVN
    集中型バージョン管理システム「Subversion(SVN)」のWindows用GUIソフト。
* Git Flow
    チームで Git を使う際に役立つ、運用ルールをまとめたツール（プラグイン）
    * master
        本番に反映するファイルで、基本的にこちらにはコミットしません。
    * release
        リリース前の微調整を行うブランチで、小さなバグ修正など  ブランチ元／develop マージ先／develop と master
    * develop
        開発を行うブランチ
        * feature
          追加機能などはこちらで作業  ブランチ元／develop マージ先／develop
■ FW／ライブラリ
* FW
  フレームワークの略 土台として機能させるソフトウェア
    * Spring Framework
        Java言語によるソフトウェア開発を支援するフレームワークの一つ。
    * Struts（ストラッツ）
        Apache Software Foundation（アパッチ ソフトウェア ファンデーション） によって開発されているオープンソースのWebアプリケーションフレームワーク
        Javaのフレームワーク
    * JSF（Java Server Faces）
        Oracle社が開発・提供
        Javaのフレームワーク
* ライブラリ
    ある特定の機能を持つプログラムを定型化して、他のプログラムが引用できる状態にしたもの
    * Bootstrap（ブートストラップ）
        OSを起動して利用可能な状態になるまで自動的に実行される処理
        HTML/CSSベースのデザインテンプレート
        CSSのフレームワーク
    * Flyway（フライウェイ）
        オープンソースのデータベースマイグレーションツール。
        データベースの状態をバージョン管理できる
    * Jackson（ジャクソン）
        JSON形式のデータを処理するための高速かつ軽量なJavaライブラリ
    * jQuery
        JavaScriptのライブラリ
    * Junit（ジェーユニット）
        Javaで開発された単体テストを行うためのテストフレームワーク
    * Log4j（ログフォージェイ）
        Java用のロギングのためのクラス・ライブラリ
    * Lombok（ロンボック）
        Javaのボイラープレートコードをソースコードから排除するために使用するライブラリ
    * ORM（オーアールマッピング）
        オブジェクト関係マッピング。データベースとオブジェクト指向プログラミング言語間の非互換なデータを変換するプログラミング技法
■ 連絡ツール
* ChatWork
    仕事で必要なコミュニケーションをより効率的にするビジネスチャット
* Slack
    チャンネルベースのメッセージプラットフォーム。
* IP Messenger
    同一LAN内に限定されたメッセンジャーアプリ
■ Java
* Javadoc（ジャバドック）
    Java言語のソースコードから「プログラムについて説明するドキュメント」を生成する仕組み
* アノテーション
    アノテーションはテキストや音声、画像などあらゆる形態のデータにタグを付ける作業
    クラスやインタフェース、メソッドやフィールド、パッケージなどに対してメタデータとして付加情報を記入する機能
* メモリ管理
    * ヒープ
        プログラムが利用するメモリ領域の種類の一つ。任意に確保や解放を繰り返すことができる。
    * GC（ガレージコレクション）
        プログラムの実行環境などが備える機能の一つ。
        実行中のプログラムが占有していたメモリ領域のうち不要になったものを自動的に解放し、空き領域として再利用できるようにするもの
* GoF（Gang of Four）ギャング・オブ・フォー
    Gang of Four(ギャング・オブ・フォー)と呼ばれる四人組が提唱したオブジェクト指向においてよく使える設計パターン
      大きく３つに分類されるオブジェクトの生成、プログラムの構造、オブジェクトの振る舞い
* デザインパターン
    オブジェクト指向の言語で使われる設計パターン
■ その他
* オブジェクト指向
    オブジェクト同士の相互作用として、システムの振る舞いをとらえる考え方
* バッチ処理
    あらかじめ登録した一連の処理を自動的に実行する処理方式
* コンパイル
    プログラミング言語を解析し、コンピュータが実行可能な形式のプログラムに変換すること
    ソースコードをオブジェクトコードに変換すること
* カバレッジ
    所定の網羅条件がテストによってどれだけ実行されたかを割合で表したもの
    テスト項目全体の確認作業が終了している箇所
* プラットホーム
    アプリケーションが動作するのに必要な環境
